worker_processes auto;
pid /run/nginx.pid;
# include /etc/nginx/modules-enabled/*.conf; # Uncomment if you have specific modules

events {
    worker_connections 768;
    # multi_accept on;
}

http {
    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    keepalive_timeout 65;
    types_hash_max_size 2048;
    # server_tokens off; # For security, hide Nginx version

    include /etc/nginx/mime.types;
    default_type application/octet-stream;

    access_log /var/log/nginx/access.log;
    error_log /var/log/nginx/error.log;

    gzip on;
    gzip_disable "msie6";
    # gzip_vary on;
    # gzip_proxied any;
    # gzip_comp_level 6;
    # gzip_buffers 16 8k;
    # gzip_http_version 1.1;
    # gzip_types text/plain text/css application/json application/javascript text/xml application/xml application/xml+rss text/javascript;

    upstream frontend_app {
        server frontend:3000; # 'frontend' is the service name from docker-compose, 3000 is its internal port
    }

    upstream backend_api {
        server app:8000;      # 'app' is the service name from docker-compose, 8000 is its internal port
    }

    upstream mlflow_ui {
        server mlflow_server:5000; # 'mlflow_server' is the service name, 5000 is its internal port
    }

    server {
        listen 80; # Nginx listens on port 80 (HTTP)
        server_name localhost your_domain.com; # Replace with your actual domain if applicable

        # Serve Frontend (Next.js) - Default
        location / {
            proxy_pass http://frontend_app;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection 'upgrade';
            proxy_set_header Host $host;
            proxy_cache_bypass $http_upgrade;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        # Proxy API requests to the backend
        location /api/ { # Assuming your backend API endpoints are prefixed with /api/ in the URL
            proxy_pass http://backend_api/; # Note the trailing slash
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection 'upgrade';
            proxy_set_header Host $host;
            proxy_cache_bypass $http_upgrade;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;

            # Important: If your FastAPI app is at the root of the 'app' service (e.g., app:8000/predict)
            # and you want Nginx to route 'localhost/api/predict' to 'app:8000/predict',
            # you might need to rewrite or ensure the path is correctly passed.
            # The trailing slash in `proxy_pass http://backend_api/;` is important.
            # It means if the request is /api/foo, it will be proxied to backend_api/foo.
        }

        # Proxy MLflow UI
        location /mlflow/ {
            proxy_pass http://mlflow_ui/; # Note the trailing slash
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection 'upgrade';
            proxy_set_header Host $host;
            proxy_cache_bypass $http_upgrade;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        # Optional: Location for static assets if Next.js doesn't handle them ideally via proxy
        # location /_next/static/ {
        #     proxy_pass http://frontend_app/_next/static/;
        #     # Add caching headers here for static assets
        #     expires 1y;
        #     add_header Cache-Control "public";
        # }

        # WebSocket support for Next.js development server (HMR)
        location /_next/webpack-hmr {
            proxy_pass http://frontend_app;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";
        }
    }

    # Optional: Add another server block for HTTPS if you set up SSL certificates
    # server {
    #     listen 443 ssl http2;
    #     server_name your_domain.com;
    #
    #     ssl_certificate /etc/nginx/ssl/your_domain.com.crt; # Path to your certificate
    #     ssl_certificate_key /etc/nginx/ssl/your_domain.com.key; # Path to your private key
    #
    #     # SSL configurations (hardening, ciphers, etc.)
    #     # include /etc/nginx/conf.d/ssl_params.conf;
    #
    #     location / {
    #         proxy_pass http://frontend_app;
    #         # ... same proxy_set_header directives as above ...
    #     }
    #
    #     location /api/ {
    #         proxy_pass http://backend_api/;
    #         # ... same proxy_set_header directives as above ...
    #     }
    #
    #     location /mlflow/ {
    #         proxy_pass http://mlflow_ui/;
    #         # ... same proxy_set_header directives as above ...
    #     }
    # }
}